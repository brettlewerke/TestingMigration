resources:
  repositories:
  - repository: DevOps
    type: git
    name: TestingMigration
    ref: dev
trigger:
  branches:
    include:
    - dev
    - feature/*
    - release/*
    - ehr/*
    - devsandbox
    - hotfix/*
    exclude:
    - release/hclappscan
  paths:
    exclude:
    - build-pipeline.yml
    - dev-release-pipeline.yml
    - build-release-pipeline.yml
    - Hclappscan-build-pipeline.yml
pool:
  name: selfhostedagent-preprod
variables:
- name: solution
  value: '**/*.sln'
- name: buildPlatform
  value: 'Any CPU'
- name: buildConfiguration
  value: 'Release'
- group: 'ServiceConnections-PR-Dev'
stages:
- stage: 'API_Build'
  displayName: 'Build Project'
  jobs:
  - job: ''
    displayName: 'OLOS API Build'
    pool:
      name: selfhostedagent-preprod
    steps:
    - task: SonarCloudPrepare@1
      inputs:
        SonarCloud: 'SonarCloud Code Scan'
        organization: 'gmr-devops'
        scannerMode: 'MSBuild'
        projectKey: 'GMR-DevOps_GMR.TMP.OLOS'
        projectName: 'GMR.TMP.OLOS'
    - task: NuGetCommand@2
      displayName: "Nuget Package Restore"
      inputs:
        command: 'restore'
        restoreSolution: '$(solution)'
        feedsToUse: 'select'
        vstsFeed: 'a5f26d51-0ef5-429c-8040-939b89771cb0/82a05a5c-4eec-4a87-a3b2-c75991430044'
    - task: VSBuild@1
      displayName: 'Build Solution'
      inputs:
        solution: '$(solution)'
        msbuildArgs: '/p:DeployOnBuild=true /p:WebPublishMethod=Package /p:PackageAsSingleFile=true /p:SkipInvalidConfigurations=true /p:DesktopBuildPackageLocation="$(Build.artifactStagingDirectory)\OLOSGENII-$(Build.BuildId).zip" /p:DeployIisAppPath="Default Web Site"'
        platform: '$(buildPlatform)'
        configuration: '$(buildConfiguration)'
    - task: PowerShell@2
      displayName: Generate SBOM
      inputs:
        targetType: 'inline'
        script: |
          Invoke-WebRequest -Uri "https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-win-x64.exe" -OutFile "$(Agent.TempDirectory)/sbom-tool.exe"
          $(Agent.TempDirectory)/sbom-tool generate -b $(Build.ArtifactStagingDirectory) -bc $(Build.SourcesDirectory) -pn SBOM-$(Build.Repository.Name)-$(Build.BuildNumber) -pv 1.0.0 -ps GMR -nsb https://sbom.gmr.net
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/BuildScripts'
        Contents: 'Web.OlosAdmin.config'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosAdminXMLTransformation'
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII'
        Contents: 'Web.config'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosAdminXMLTransformation'
    - task: FileTransform@1
      inputs:
        folderPath: '$(Build.ArtifactStagingDirectory)/OlosAdminXMLTransformation'
        enableXmlTransform: true
        xmlTransformationRules: '-transform Web.OlosAdmin.config -xml Web.config -result Web.config'
        fileType: 'xml'
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/Certificates'
        Contents: '**'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/Certificates'
    - task: SonarCloudAnalyze@1
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Drop'
        publishLocation: 'Container'
- stage: 'PR_Dev_Build'
  pool:
    name: selfhostedagent-preprod-new
  dependsOn:
  - API_Build
  condition: and(succeeded('API_Build'), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  variables:
  - group: 'common-appsettings-PR-Dev'
  displayName: 'UI Build- PR Dev'
  jobs:
  - job: One
    displayName: 'OLOS UI Build'
    steps:
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
          Web.DEV.config
          saml.DEV.config
          OlosSamlConfig.DEV.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosDevPRXMLTransformation'
    - task: FileTransform@1
      inputs:
        folderPath: '$(Build.ArtifactStagingDirectory)/OlosDevPRXMLTransformation'
        enableXmlTransform: true
        xmlTransformationRules: |
          -transform Web.DEV.config -xml Web.config
          -transform saml.DEV.config -xml saml.config
          -transform OlosSamlConfig.DEV.xml -xml OlosSamlConfig.xml
        fileType: xml
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.ArtifactStagingDirectory)/OlosDevPRXMLTransformation'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-PR-Dev'
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/BuildScripts/ResetConfig.ps1'
        arguments: '-AppConfigPath $(Build.ArtifactStagingDirectory)/OlosUI-PR-Dev/Web.config -JsConfigPath $(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/config/environment.js'
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/BuildScripts/UpdateVersionNumber.ps1'
        arguments: '-configPath $(Build.ArtifactStagingDirectory)/OlosUI-PR-Dev/Web.config -versionValue $(Build.BuildId)'
    - task: npmAuthenticate@0
      inputs:
        workingFile: 'OlosGenII/OlosUI/.npmrc'
    - task: Npm@1
      displayName: 'NPM install'
      inputs:
        workingDir: 'OlosGenII/OlosUI'
        command: 'install'
    - task: CmdLine@2
      displayName: 'Bower Install'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'bower install'
    - task: CopyFiles@2
      displayName: 'Add package-lock.json'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/OlosGenII/OlosUI'
        Contents: 'package-lock.json'
        TargetFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI'
        OverWrite: false
    - task: CmdLine@2
      displayName: 'Ember auto import'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'ember install ember-auto-import'
    - task: CmdLine@2
      displayName: 'Ember build'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'npm run dev --environment=development ---output-path="$(Build.ArtifactStagingDirectory)/OlosUI-PR-Dev/OlosUI/dist/'
    - task: PowerShell@2
      displayName: Generate SBOM
      inputs:
        targetType: 'inline'
        script: |
          Invoke-WebRequest -Uri "https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-win-x64.exe" -OutFile "$(Agent.TempDirectory)/sbom-tool.exe"
          $(Agent.TempDirectory)/sbom-tool generate -b $(Build.ArtifactStagingDirectory) -bc $(Build.SourcesDirectory) -pn SBOM-$(Build.Repository.Name)-$(Build.BuildNumber) -pv 1.0.0 -ps GMR -nsb https://sbom.gmr.net
    - task: CopyFiles@2
      displayName: 'Copy dist to Artifacts'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/dist'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-PR-Dev/OlosUI/dist'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Drop'
        publishLocation: 'Container'
- stage: 'DR_Dev_Build'
  pool:
    name: selfhostedagent-preprod-new
  dependsOn:
  - API_Build
  condition: and(succeeded('API_Build'), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  variables:
  - group: 'common-appsettings-DR-Dev'
  displayName: 'UI Build- DR Dev'
  jobs:
  - job: One
    displayName: 'OLOS UI Build'
    steps:
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
          Web.DEV.config
          saml.DEV.config
          OlosSamlConfig.DEV.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosDevDRXMLTransformation'
    - task: FileTransform@1
      inputs:
        folderPath: '$(Build.ArtifactStagingDirectory)/OlosDevDRXMLTransformation'
        enableXmlTransform: true
        xmlTransformationRules: |
          -transform Web.DEV.config -xml Web.config
          -transform saml.DEV.config -xml saml.config
          -transform OlosSamlConfig.DEV.xml -xml OlosSamlConfig.xml
        fileType: xml
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.ArtifactStagingDirectory)/OlosDevDRXMLTransformation'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-DR-Dev'
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/BuildScripts/ResetConfig.ps1'
        arguments: '-AppConfigPath $(Build.ArtifactStagingDirectory)/OlosUI-DR-Dev/Web.config -JsConfigPath $(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/config/environment.js'
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/BuildScripts/UpdateVersionNumber.ps1'
        arguments: '-configPath $(Build.ArtifactStagingDirectory)/OlosUI-DR-Dev/Web.config -versionValue $(Build.BuildId)'
    - task: AzurePowerShell@5
      displayName: 'Replace Content for Newrelic'
      inputs:
        azureSubscription: '$(subscription)'
        ScriptType: 'FilePath'
        ScriptPath: '$(System.DefaultWorkingDirectory)/BuildScripts/ReplaceContentforNewrelic.ps1'
        ScriptArguments: -sourceFile "$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/public/js/newrelic/new-relic.js"           -agentID 'agentID:"1134229496"'     -applicationID 'applicationID:"1048574580"'
        azurePowerShellVersion: 'LatestVersion'
    - task: npmAuthenticate@0
      inputs:
        workingFile: 'OlosGenII/OlosUI/.npmrc'
    - task: Npm@1
      displayName: 'NPM install'
      inputs:
        workingDir: 'OlosGenII/OlosUI'
        command: 'install'
    - task: CmdLine@2
      displayName: 'Bower Install'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'bower install'
    - task: CopyFiles@2
      displayName: 'Add package-lock.json'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/OlosGenII/OlosUI'
        Contents: 'package-lock.json'
        TargetFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI'
        OverWrite: false
    - task: CmdLine@2
      displayName: 'Ember auto import'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'ember install ember-auto-import'
    - task: CmdLine@2
      displayName: 'Ember build'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'npm run dev --environment=development ---output-path="$(Build.ArtifactStagingDirectory)/OlosUI-DR-Dev/OlosUI/dist/'
    - task: PowerShell@2
      displayName: Generate SBOM
      inputs:
        targetType: 'inline'
        script: |
          Invoke-WebRequest -Uri "https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-win-x64.exe" -OutFile "$(Agent.TempDirectory)/sbom-tool.exe"
          $(Agent.TempDirectory)/sbom-tool generate -b $(Build.ArtifactStagingDirectory) -bc $(Build.SourcesDirectory) -pn SBOM-$(Build.Repository.Name)-$(Build.BuildNumber) -pv 1.0.0 -ps GMR -nsb https://sbom.gmr.net
    - task: CopyFiles@2
      displayName: 'Copy dist to Artifacts'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/dist'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-DR-Dev/OlosUI/dist'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Drop'
        publishLocation: 'Container'
- stage: 'DevSandbox_Build'
  pool:
    name: selfhostedagent-preprod-new
  dependsOn:
  - API_Build
  condition: and(succeeded('API_Build'), contains(variables['Build.SourceBranch'], 'refs/heads/devsandbox'))
  variables:
  - group: 'common-appsettings-PR-Dev-Sandbox'
  displayName: 'UI Build- DevSandbox'
  jobs:
  - job: One
    displayName: 'OLOS UI Build'
    steps:
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
          Web.devsandbox.config
          saml.devsandbox.config
          OlosSamlConfig.devsandbox.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosDevSandboxXMLTransformation'
    - task: FileTransform@1
      inputs:
        folderPath: '$(Build.ArtifactStagingDirectory)/OlosDevSandboxXMLTransformation'
        enableXmlTransform: true
        xmlTransformationRules: |
          -transform Web.devsandbox.config -xml Web.config
          -transform saml.devsandbox.config -xml saml.config
          -transform OlosSamlConfig.DEV.xml -xml OlosSamlConfig.xml
        fileType: xml
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.ArtifactStagingDirectory)/OlosDevSandboxXMLTransformation'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-DevSandbox'
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/BuildScripts/ResetConfig.ps1'
        arguments: '-AppConfigPath $(Build.ArtifactStagingDirectory)/OlosUI-DevSandbox/Web.config -JsConfigPath $(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/config/environment.js'
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/BuildScripts/UpdateVersionNumber.ps1'
        arguments: '-configPath $(Build.ArtifactStagingDirectory)/OlosUI-DevSandbox/Web.config -versionValue $(Build.BuildId)'
    - task: npmAuthenticate@0
      inputs:
        workingFile: 'OlosGenII/OlosUI/.npmrc'
    - task: Npm@1
      displayName: 'NPM install'
      inputs:
        workingDir: 'OlosGenII/OlosUI'
        command: 'install'
    - task: CmdLine@2
      displayName: 'Bower Install'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'bower install'
    - task: CopyFiles@2
      displayName: 'Add package-lock.json'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/OlosGenII/OlosUI'
        Contents: 'package-lock.json'
        TargetFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI'
        OverWrite: false
    - task: CmdLine@2
      displayName: 'Ember auto import'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'ember install ember-auto-import'
    - task: CmdLine@2
      displayName: 'Ember build'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'npm run dev --environment=development ---output-path="$(Build.ArtifactStagingDirectory)/OlosUI-DevSandbox/OlosUI/dist/'
    - task: PowerShell@2
      displayName: Generate SBOM
      inputs:
        targetType: 'inline'
        script: |
          Invoke-WebRequest -Uri "https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-win-x64.exe" -OutFile "$(Agent.TempDirectory)/sbom-tool.exe"
          $(Agent.TempDirectory)/sbom-tool generate -b $(Build.ArtifactStagingDirectory) -bc $(Build.SourcesDirectory) -pn SBOM-$(Build.Repository.Name)-$(Build.BuildNumber) -pv 1.0.0 -ps GMR -nsb https://sbom.gmr.net
    - task: CopyFiles@2
      displayName: 'Copy dist to Artifacts'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/dist'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-DevSandbox/OlosUI/dist'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Drop'
        publishLocation: 'Container'
- stage: 'QA_Build'
  pool:
    name: selfhostedagent-preprod-new
  dependsOn:
  - API_Build
  condition: and(succeeded('API_Build'), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  variables:
  - group: 'common-appsettings-PR-QA'
  displayName: 'UI Build- QA'
  jobs:
  - job: One
    displayName: 'OLOS UI Build'
    steps:
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
          Web.QA.config
          saml.QA.config
          OlosSamlConfig.QA.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosQAXMLTransformation'
    - task: FileTransform@1
      inputs:
        folderPath: '$(Build.ArtifactStagingDirectory)/OlosQAXMLTransformation'
        enableXmlTransform: true
        xmlTransformationRules: |
          -transform Web.QA.config -xml Web.config
          -transform saml.QA.config -xml saml.config
          -transform OlosSamlConfig.QA.xml -xml OlosSamlConfig.xml
        fileType: xml
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.ArtifactStagingDirectory)/OlosQAXMLTransformation'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-QA'
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/BuildScripts/ResetConfig.ps1'
        arguments: '-AppConfigPath $(Build.ArtifactStagingDirectory)/OlosUI-QA/Web.config -JsConfigPath $(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/config/environment.js'
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/BuildScripts/UpdateVersionNumber.ps1'
        arguments: '-configPath $(Build.ArtifactStagingDirectory)/OlosUI-QA/Web.config -versionValue $(Build.BuildId)'
    - task: AzurePowerShell@5
      displayName: 'Replace Content for Newrelic'
      inputs:
        azureSubscription: '$(subscription)'
        ScriptType: 'FilePath'
        ScriptPath: '$(System.DefaultWorkingDirectory)/BuildScripts/ReplaceContentforNewrelic.ps1'
        ScriptArguments: -sourceFile "$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/public/js/newrelic/new-relic.js"           -agentID 'agentID:"1134202001"'     -applicationID 'applicationID:"1082830084"'
        azurePowerShellVersion: 'LatestVersion'
    - task: npmAuthenticate@0
      inputs:
        workingFile: 'OlosGenII/OlosUI/.npmrc'
    - task: Npm@1
      displayName: 'NPM install'
      inputs:
        workingDir: 'OlosGenII/OlosUI'
        command: 'install'
    - task: CmdLine@2
      displayName: 'Bower Install'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'bower install'
    - task: CopyFiles@2
      displayName: 'Add package-lock.json'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/OlosGenII/OlosUI'
        Contents: 'package-lock.json'
        TargetFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI'
        OverWrite: false
    - task: CmdLine@2
      displayName: 'Ember auto import'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'ember install ember-auto-import'
    - task: CmdLine@2
      displayName: 'Ember build'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'npm run prod --environment=development ---output-path="$(Build.ArtifactStagingDirectory)/OlosUI-QA/OlosUI/dist/'
    - task: PowerShell@2
      displayName: Generate SBOM
      inputs:
        targetType: 'inline'
        script: |
          Invoke-WebRequest -Uri "https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-win-x64.exe" -OutFile "$(Agent.TempDirectory)/sbom-tool.exe"
          $(Agent.TempDirectory)/sbom-tool generate -b $(Build.ArtifactStagingDirectory) -bc $(Build.SourcesDirectory) -pn SBOM-$(Build.Repository.Name)-$(Build.BuildNumber) -pv 1.0.0 -ps GMR -nsb https://sbom.gmr.net
    - task: CopyFiles@2
      displayName: 'Copy dist to Artifacts'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/dist'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-QA/OlosUI/dist'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Drop'
        publishLocation: 'Container'
- stage: 'UAT_Build'
  pool:
    name: selfhostedagent-preprod-new
  dependsOn:
  - API_Build
  condition: and(succeeded('API_Build'), contains(variables['Build.SourceBranch'], 'refs/heads/release/'))
  variables:
  - group: 'common-appsettings-PR-UAT'
  displayName: 'UI Build- UAT'
  jobs:
  - job: One
    displayName: 'OLOS UI Build'
    steps:
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
          Web.UAT.config
          saml.UAT.config
          OlosSamlConfig.UAT.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUATXMLTransformation'
    - task: FileTransform@1
      inputs:
        folderPath: '$(Build.ArtifactStagingDirectory)/OlosUATXMLTransformation'
        enableXmlTransform: true
        xmlTransformationRules: |
          -transform Web.UAT.config -xml Web.config
          -transform saml.UAT.config -xml saml.config
          -transform OlosSamlConfig.UAT.xml -xml OlosSamlConfig.xml
        fileType: xml
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.ArtifactStagingDirectory)/OlosUATXMLTransformation'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-UAT'
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/BuildScripts/ResetConfig.ps1'
        arguments: '-AppConfigPath $(Build.ArtifactStagingDirectory)/OlosUI-UAT/Web.config -JsConfigPath $(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/config/environment.js'
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/BuildScripts/UpdateVersionNumber.ps1'
        arguments: '-configPath $(Build.ArtifactStagingDirectory)/OlosUI-UAT/Web.config -versionValue $(Build.BuildId)'
    - task: AzurePowerShell@5
      displayName: 'Replace Content for Newrelic'
      inputs:
        azureSubscription: '$(subscription)'
        ScriptType: 'FilePath'
        ScriptPath: '$(System.DefaultWorkingDirectory)/BuildScripts/ReplaceContentforNewrelic.ps1'
        ScriptArguments: -sourceFile "$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/public/js/newrelic/new-relic.js"           -agentID 'agentID:"1134194618"'     -applicationID 'applicationID:"1013138861"'
        azurePowerShellVersion: 'LatestVersion'
    - task: npmAuthenticate@0
      inputs:
        workingFile: 'OlosGenII/OlosUI/.npmrc'
    - task: Npm@1
      displayName: 'NPM install'
      inputs:
        workingDir: 'OlosGenII/OlosUI'
        command: 'install'
    - task: CmdLine@2
      displayName: 'Bower Install'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'bower install'
    - task: CopyFiles@2
      displayName: 'Add package-lock.json'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/OlosGenII/OlosUI'
        Contents: 'package-lock.json'
        TargetFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI'
        OverWrite: false
    - task: CmdLine@2
      displayName: 'Ember auto import'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'ember install ember-auto-import'
    - task: CmdLine@2
      displayName: 'Ember build'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'npm run prod --environment=production ---output-path="$(Build.ArtifactStagingDirectory)/OlosUI-UAT/OlosUI/dist/'
    - task: PowerShell@2
      displayName: Generate SBOM
      inputs:
        targetType: 'inline'
        script: |
          Invoke-WebRequest -Uri "https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-win-x64.exe" -OutFile "$(Agent.TempDirectory)/sbom-tool.exe"
          $(Agent.TempDirectory)/sbom-tool generate -b $(Build.ArtifactStagingDirectory) -bc $(Build.SourcesDirectory) -pn SBOM-$(Build.Repository.Name)-$(Build.BuildNumber) -pv 1.0.0 -ps GMR -nsb https://sbom.gmr.net
    - task: CopyFiles@2
      displayName: 'Copy dist to Artifacts'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/dist'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-UAT/OlosUI/dist'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Drop'
        publishLocation: 'Container'
- stage: 'Staging_Build'
  pool:
    name: selfhostedagent-preprod-new
  dependsOn:
  - API_Build
  condition: and(succeeded('API_Build'), or(contains(variables['Build.SourceBranch'], 'refs/heads/release/'),contains(variables['Build.SourceBranch'], 'refs/heads/hotfix/')))
  variables:
  - group: 'common-appsettings-PR-Stage'
  displayName: 'UI Build- Stage'
  jobs:
  - job: One
    displayName: 'OLOS UI Build'
    steps:
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
          Web.STAGE.config
          saml.STAGE.config
          OlosSamlConfig.STAGE.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosStageXMLTransformation'
    - task: FileTransform@1
      inputs:
        folderPath: '$(Build.ArtifactStagingDirectory)/OlosStageXMLTransformation'
        enableXmlTransform: true
        xmlTransformationRules: |
          -transform Web.STAGE.config -xml Web.config
          -transform saml.STAGE.config -xml saml.config
          -transform OlosSamlConfig.STAGE.xml -xml OlosSamlConfig.xml
        fileType: xml
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.ArtifactStagingDirectory)/OlosStageXMLTransformation'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-Stage'
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/BuildScripts/ResetConfig.ps1'
        arguments: '-AppConfigPath $(Build.ArtifactStagingDirectory)/OlosUI-Stage/Web.config -JsConfigPath $(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/config/environment.js'
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/BuildScripts/UpdateVersionNumber.ps1'
        arguments: '-configPath $(Build.ArtifactStagingDirectory)/OlosUI-Stage/Web.config -versionValue $(Build.BuildId)'
    - task: AzurePowerShell@5
      displayName: 'Replace Content for Newrelic'
      inputs:
        azureSubscription: '$(subscription)'
        ScriptType: 'FilePath'
        ScriptPath: '$(System.DefaultWorkingDirectory)/BuildScripts/ReplaceContentforNewrelic.ps1'
        ScriptArguments: -sourceFile "$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/public/js/newrelic/new-relic.js"           -agentID 'agentID:"1134194618"'     -applicationID 'applicationID:"1013138861"'
        azurePowerShellVersion: 'LatestVersion'
    - task: npmAuthenticate@0
      inputs:
        workingFile: 'OlosGenII/OlosUI/.npmrc'
    - task: Npm@1
      displayName: 'NPM install'
      inputs:
        workingDir: 'OlosGenII/OlosUI'
        command: 'install'
    - task: CmdLine@2
      displayName: 'Bower Install'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'bower install'
    - task: CopyFiles@2
      displayName: 'Add package-lock.json'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/OlosGenII/OlosUI'
        Contents: 'package-lock.json'
        TargetFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI'
        OverWrite: false
    - task: CmdLine@2
      displayName: 'Ember auto import'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'ember install ember-auto-import'
    - task: CmdLine@2
      displayName: 'Ember build'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'npm run prod --environment=production ---output-path="$(Build.ArtifactStagingDirectory)/OlosUI-Stage/OlosUI/dist/'
    - task: PowerShell@2
      displayName: Generate SBOM
      inputs:
        targetType: 'inline'
        script: |
          Invoke-WebRequest -Uri "https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-win-x64.exe" -OutFile "$(Agent.TempDirectory)/sbom-tool.exe"
          $(Agent.TempDirectory)/sbom-tool generate -b $(Build.ArtifactStagingDirectory) -bc $(Build.SourcesDirectory) -pn SBOM-$(Build.Repository.Name)-$(Build.BuildNumber) -pv 1.0.0 -ps GMR -nsb https://sbom.gmr.net
    - task: CopyFiles@2
      displayName: 'Copy dist to Artifacts'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/dist'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-Stage/OlosUI/dist'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Drop'
        publishLocation: 'Container'
- stage: 'PR_Prod_Build'
  pool:
    name: selfhostedagent-prod-new
  dependsOn:
  - API_Build
  condition: and(succeeded('API_Build'), or(contains(variables['Build.SourceBranch'], 'refs/heads/release/'),contains(variables['Build.SourceBranch'], 'refs/heads/hotfix/')))
  variables:
  - group: 'common-appsettings-PR-Prod'
  displayName: 'UI Build- PR Prod'
  jobs:
  - job: One
    displayName: 'OLOS UI Build'
    steps:
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
          Web.PROD.config
          saml.PROD.config
          OlosSamlConfig.PROD.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosPRProdXMLTransformation'
    - task: FileTransform@1
      inputs:
        folderPath: '$(Build.ArtifactStagingDirectory)/OlosPRProdXMLTransformation'
        enableXmlTransform: true
        xmlTransformationRules: |
          -transform Web.PROD.config -xml Web.config
          -transform saml.PROD.config -xml saml.config
          -transform OlosSamlConfig.PROD.xml -xml OlosSamlConfig.xml
        fileType: 'xml'
        targetFiles: 'Web.config'
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.ArtifactStagingDirectory)/OlosPRProdXMLTransformation'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-PR-Prod'
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/BuildScripts/ResetConfig.ps1'
        arguments: '-AppConfigPath $(Build.ArtifactStagingDirectory)/OlosUI-PR-Prod/Web.config -JsConfigPath $(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/config/environment.js'
    - task: AzurePowerShell@5
      displayName: 'Replace Content for Newrelic'
      inputs:
        azureSubscription: '$(subscription)'
        ScriptType: 'FilePath'
        ScriptPath: '$(System.DefaultWorkingDirectory)/BuildScripts/ReplaceContentforNewrelic.ps1'
        ScriptArguments: -sourceFile "$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/public/js/newrelic/new-relic.js"           -agentID 'agentID:"1134198681"'     -applicationID 'applicationID:"967298718"'
        azurePowerShellVersion: 'LatestVersion'
    - task: npmAuthenticate@0
      inputs:
        workingFile: 'OlosGenII/OlosUI/.npmrc'
    - task: Npm@1
      displayName: 'NPM install'
      inputs:
        workingDir: 'OlosGenII/OlosUI'
        command: 'install'
    - task: CmdLine@2
      displayName: 'Installing Bower Tool'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'npm install bower'
    - task: CmdLine@2
      displayName: 'Bower Install'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'bower install'
    - task: CopyFiles@2
      displayName: 'Add package-lock.json'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/OlosGenII/OlosUI'
        Contents: 'package-lock.json'
        TargetFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI'
        OverWrite: false
    - task: CmdLine@2
      displayName: 'Ember auto import'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'ember install ember-auto-import'
    - task: CmdLine@2
      displayName: 'Ember build'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'npm run prod --environment=production ---output-path="$(Build.ArtifactStagingDirectory)/OlosUI-PR-Prod/OlosUI/dist/'
    - task: PowerShell@2
      displayName: Generate SBOM
      inputs:
        targetType: 'inline'
        script: |
          Invoke-WebRequest -Uri "https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-win-x64.exe" -OutFile "$(Agent.TempDirectory)/sbom-tool.exe"
          $(Agent.TempDirectory)/sbom-tool generate -b $(Build.ArtifactStagingDirectory) -bc $(Build.SourcesDirectory) -pn SBOM-$(Build.Repository.Name)-$(Build.BuildNumber) -pv 1.0.0 -ps GMR -nsb https://sbom.gmr.net
    - task: CopyFiles@2
      displayName: 'Copy dist to Artifacts'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/dist'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-PR-Prod/OlosUI/dist'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Drop'
        publishLocation: 'Container'
- stage: 'DR_Prod_Build'
  pool:
    name: selfhostedagent-prod-new
  dependsOn:
  - API_Build
  condition: and(succeeded('API_Build'), or(contains(variables['Build.SourceBranch'], 'refs/heads/release/'),contains(variables['Build.SourceBranch'], 'refs/heads/hotfix/')))
  variables:
  - group: 'common-appsettings-DR-Prod'
  displayName: 'UI Build- DR Prod'
  jobs:
  - job: One
    displayName: 'OLOS UI Build'
    steps:
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
          Web.PROD.config
          saml.PROD.config
          OlosSamlConfig.PROD.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosDRProdXMLTransformation'
    - task: FileTransform@1
      inputs:
        folderPath: '$(Build.ArtifactStagingDirectory)/OlosDRProdXMLTransformation'
        enableXmlTransform: true
        xmlTransformationRules: |
          -transform Web.PROD.config -xml Web.config
          -transform saml.PROD.config -xml saml.config
          -transform OlosSamlConfig.PROD.xml -xml OlosSamlConfig.xml
        fileType: 'xml'
        targetFiles: 'Web.config'
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.ArtifactStagingDirectory)/OlosDRProdXMLTransformation'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-DR-Prod'
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/BuildScripts/ResetConfig.ps1'
        arguments: '-AppConfigPath $(Build.ArtifactStagingDirectory)/OlosUI-DR-Prod/Web.config -JsConfigPath $(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/config/environment.js'
    - task: AzurePowerShell@5
      displayName: 'Replace Content for Newrelic'
      inputs:
        azureSubscription: '$(subscription)'
        ScriptType: 'FilePath'
        ScriptPath: '$(System.DefaultWorkingDirectory)/BuildScripts/ReplaceContentforNewrelic.ps1'
        ScriptArguments: -sourceFile "$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/public/js/newrelic/new-relic.js"           -agentID 'agentID:"1134214493"'     -applicationID 'applicationID:"967354817"'
        azurePowerShellVersion: 'LatestVersion'
    - task: npmAuthenticate@0
      inputs:
        workingFile: 'OlosGenII/OlosUI/.npmrc'
    - task: Npm@1
      displayName: 'NPM install'
      inputs:
        workingDir: 'OlosGenII/OlosUI'
        command: 'install'
    - task: CmdLine@2
      displayName: 'Installing Bower Tool'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'npm install bower'
    - task: CmdLine@2
      displayName: 'Bower Install'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'bower install'
    - task: CopyFiles@2
      displayName: 'Add package-lock.json'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/OlosGenII/OlosUI'
        Contents: 'package-lock.json'
        TargetFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI'
        OverWrite: false
    - task: CmdLine@2
      displayName: 'Ember auto import'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'ember install ember-auto-import'
    - task: CmdLine@2
      displayName: 'Ember build'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'npm run prod --environment=production ---output-path="$(Build.ArtifactStagingDirectory)/OlosUI-DR-Prod/OlosUI/dist/'
    - task: PowerShell@2
      displayName: Generate SBOM
      inputs:
        targetType: 'inline'
        script: |
          Invoke-WebRequest -Uri "https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-win-x64.exe" -OutFile "$(Agent.TempDirectory)/sbom-tool.exe"
          $(Agent.TempDirectory)/sbom-tool generate -b $(Build.ArtifactStagingDirectory) -bc $(Build.SourcesDirectory) -pn SBOM-$(Build.Repository.Name)-$(Build.BuildNumber) -pv 1.0.0 -ps GMR -nsb https://sbom.gmr.net
    - task: CopyFiles@2
      displayName: 'Copy dist to Artifacts'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/dist'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-DR-Prod/OlosUI/dist'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Drop'
        publishLocation: 'Container'
- stage: 'EHRTEST_Build'
  pool:
    name: selfhostedagent-preprod-new
  dependsOn:
  - API_Build
  condition: and(succeeded('API_Build'), or(contains(variables['Build.SourceBranch'], 'refs/heads/release/'), contains(variables['Build.SourceBranch'], 'refs/heads/ehr/'), contains(variables['Build.SourceBranch'], 'refs/heads/hotfix/')))
  variables:
  - group: 'common-appsettings-PR-EHRTEST'
  displayName: 'UI Build- EHRTest'
  jobs:
  - job: One
    displayName: 'OLOS UI Build'
    steps:
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
          Web.EHRTest.config
          saml.EHRTest.config
          OlosSamlConfig.EHRTest.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosEHRTESTXMLTransformation'
    - task: FileTransform@1
      inputs:
        folderPath: '$(Build.ArtifactStagingDirectory)/OlosEHRTESTXMLTransformation'
        enableXmlTransform: true
        xmlTransformationRules: |
          -transform Web.EHRTest.config -xml Web.config
          -transform saml.EHRTest.config -xml saml.config
          -transform OlosSamlConfig.EHRTest.xml -xml OlosSamlConfig.xml
        fileType: xml
    - task: CopyFiles@2
      inputs:
        SourceFolder: '$(Build.ArtifactStagingDirectory)/OlosEHRTESTXMLTransformation'
        Contents: |
          Web.config
          saml.config
          OlosSamlConfig.xml
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-EHRTEST'
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/BuildScripts/ResetConfig.ps1'
        arguments: '-AppConfigPath $(Build.ArtifactStagingDirectory)/OlosUI-EHRTEST/Web.config -JsConfigPath $(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/config/environment.js'
    - task: PowerShell@2
      inputs:
        filePath: '$(System.DefaultWorkingDirectory)/BuildScripts/UpdateVersionNumber.ps1'
        arguments: '-configPath $(Build.ArtifactStagingDirectory)/OlosUI-EHRTEST/Web.config -versionValue $(Build.BuildId)'
    - task: AzurePowerShell@5
      displayName: 'Replace Content for Newrelic'
      inputs:
        azureSubscription: '$(subscription)'
        ScriptType: 'FilePath'
        ScriptPath: '$(System.DefaultWorkingDirectory)/BuildScripts/ReplaceContentforNewrelic.ps1'
        ScriptArguments: -sourceFile "$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/public/js/newrelic/new-relic.js"           -agentID 'agentID:"1134203754"'     -applicationID 'applicationID:"962494019"'
        azurePowerShellVersion: 'LatestVersion'
    - task: npmAuthenticate@0
      inputs:
        workingFile: 'OlosGenII/OlosUI/.npmrc'
    - task: Npm@1
      displayName: 'NPM install'
      inputs:
        workingDir: 'OlosGenII/OlosUI'
        command: 'install'
    - task: CmdLine@2
      displayName: 'Bower Install'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'bower install'
    - task: CopyFiles@2
      displayName: 'Add package-lock.json'
      inputs:
        SourceFolder: '$(Build.SourcesDirectory)/OlosGenII/OlosUI'
        Contents: 'package-lock.json'
        TargetFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI'
        OverWrite: false
    - task: CmdLine@2
      displayName: 'Ember auto import'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'ember install ember-auto-import'
    - task: CmdLine@2
      displayName: 'Ember build'
      inputs:
        workingDirectory: 'OlosGenII/OlosUI'
        script: 'npm run prod --environment=production ---output-path="$(Build.ArtifactStagingDirectory)/OlosUI-EHRTEST/OlosUI/dist/'
    - task: PowerShell@2
      displayName: Generate SBOM
      inputs:
        targetType: 'inline'
        script: |
          Invoke-WebRequest -Uri "https://github.com/microsoft/sbom-tool/releases/latest/download/sbom-tool-win-x64.exe" -OutFile "$(Agent.TempDirectory)/sbom-tool.exe"
          $(Agent.TempDirectory)/sbom-tool generate -b $(Build.ArtifactStagingDirectory) -bc $(Build.SourcesDirectory) -pn SBOM-$(Build.Repository.Name)-$(Build.BuildNumber) -pv 1.0.0 -ps GMR -nsb https://sbom.gmr.net
    - task: CopyFiles@2
      displayName: 'Copy dist to Artifacts'
      inputs:
        SourceFolder: '$(System.DefaultWorkingDirectory)/OlosGenII/OlosUI/dist'
        TargetFolder: '$(Build.ArtifactStagingDirectory)/OlosUI-EHRTEST/OlosUI/dist'
    - task: PublishBuildArtifacts@1
      displayName: 'Publish Build Artifacts'
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)'
        ArtifactName: 'Drop'
        publishLocation: 'Container'
- stage: 'Template_Validation'
  dependsOn:
  - PR_Dev_Build
  - DevSandbox_Build
  - QA_Build
  - UAT_Build
  - Staging_Build
  - PR_Prod_Build
  - DR_Prod_Build
  - EHRTEST_Build
  condition: or(succeeded('PR_Dev_Build'),succeeded('DevSandBox_Build'),succeeded('QA_Build'),succeeded('UAT_Build'),succeeded('Stage_Build'),succeeded('PR_Prod_Build'),succeeded('DR_Prod_Build'),succeeded('EHRTEST_Build'))
  displayName: 'Validate ARM Template'
  variables:
  - group: 'OlosUI-PR-Dev'
  - group: 'ServiceConnections-PR-Dev'
  - group: 'Virtual-Network-PR-Dev'
  - group: 'PrivateDNSZone-PR-Dev'
  - group: 'OLOSUI-FTP-PR-DEV'
  jobs:
  - job: ''
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: DevOps
    - task: AzureResourceGroupDeployment@2
      displayName: 'Validate AppService ARM Template'
      inputs:
        azureSubscription: '$(subscription)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroupName)'
        location: '$(location)'
        templateLocation: 'Linked artifact'
        csmFile: 'multipleSiteAppServices/template.json'
        overrideParameters: '-appServicePlanName $(appServicePlanName) -webAppName $(webAppName) -tags $(tags) -privatelinkName $(privatelinkName) -pvlinkVnetResourceGroup $(vnetResourcegroup) -pvlinkVnetName $(vnetName) -pvlinksnetName $(privateEndpointSubnet) -pVnetSnetName $(uiAppIntSubnet) -dnsLocation $(dnsLocation) -dnsSubscriptionId $(dnsSubscriptionId) -dnsResourceGroup $(dnsResourceGroup) -location $(location)'
        deploymentMode: 'Validation'
    - task: PowerShell@2
      displayName: 'Agent CleanUp'
      inputs:
        targetType: 'inline'
        script: 'Get-ChildItem -Recurse | foreach { Write-Host $_.FullName ; Remove-Item $_.FullName -Force -Recurse }'
        failOnStderr: true
        workingDirectory: '$(Build.SourcesDirectory)'
- stage: 'PR_Dev_Deployment'
  pool:
    name: selfhostedagent-preprod
  dependsOn:
  - Template_Validation
  condition: and(succeeded('Template_Validation'),succeeded('PR_Dev_Build'), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  displayName: 'Deploy Build on AppService in primary Dev environment'
  jobs:
  - job: ''
    variables:
    - group: 'OlosUI-PR-Dev'
    - group: 'ServiceConnections-PR-Dev'
    - group: 'Virtual-Network-PR-Dev'
    - group: 'PrivateDNSZone-PR-Dev'
    - group: 'OLOSUI-FTP-PR-DEV'
    - group: 'common-appsettings-PR-Dev'
    - name: 'VariableGroupId'
      value: 145
    - name: 'FtpHost'
      value: 'FTP_HOST'
    - name: 'FtpUserName'
      value: 'USERNAME'
    - name: 'FtpPassword'
      value: 'PASSWORD'
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: DevOps
    - task: AzureResourceGroupDeployment@2
      displayName: 'Provision appService'
      inputs:
        azureSubscription: '$(subscription)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroupName)'
        location: '$(location)'
        templateLocation: 'Linked artifact'
        csmFile: 'multipleSiteAppServices/template.json'
        overrideParameters: '-appServicePlanName $(appServicePlanName) -webAppName $(webAppName) -tags $(tags) -privatelinkName $(privatelinkName) -pvlinkVnetResourceGroup $(vnetResourcegroup) -pvlinkVnetName $(vnetName) -pvlinksnetName $(privateEndpointSubnet) -pVnetSnetName $(uiAppIntSubnet) -dnsLocation $(dnsLocation) -dnsSubscriptionId $(dnsSubscriptionId) -dnsResourceGroup $(dnsResourceGroup) -location $(location)'
        deploymentMode: 'Incremental'
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: '$(subscription)'
        ScriptType: 'FilePath'
        ScriptPath: 'multipleSiteAppServices/update_app_service_ftp_credentials.ps1'
        ScriptArguments: '-PatToken $(PatToken) -VariableGroupId $(VariableGroupId) -FtpHost $(FtpHost) -FtpUserName $(FtpUserName) -FtpPassword $(FtpPassword) -AppServiceName $(webAppName) -ResourceGroupName $(resourceGroupName)'
        azurePowerShellVersion: 'LatestVersion'
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy Build on AppService'
      inputs:
        azureSubscription: '$(subscription)'
        WebAppName: '$(webAppName)'
        packageForLinux: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL) -NEW_RELIC_APP_NAME $(NEW_RELIC_APP_NAME) -NEW_RELIC_LICENSE_KEY $(NEW_RELIC_LICENSE_KEY)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/Certificates'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot/Certificates'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-PR-Dev'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: '$(FTP_HOST)'
        username: '$(USERNAME)'
        password: '$(PASSWORD)'
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-PR-Dev'
        filePatterns: |
          saml.config
          OlosSamlConfig.xml
        remoteDirectory: '/site/wwwroot/bin'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: AzureRmWebAppDeployment@3
      displayName: 'Deploy Build for nested Olosadmin App'
      inputs:
        azureSubscription: '$(subscription)'
        appType: 'app'
        WebAppName: '$(webAppName)'
        VirtualApplication: '/olosadmin'
        Package: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosAdminXMLTransformation'
        filePatterns: 'Web.config'
        remoteDirectory: '/site/wwwroot/olosadmin/'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: new-relic-record-deployment-task@0
      displayName: 'Set New Relic Deployment Marker'
      inputs:
        NewRelicService: 'New Relic Deployment Marker'
        application: '$(NEW_RELIC_APP_NAME)'
        description: '$(Description)'
        user: '$(User)'
    - task: PowerShell@2
      displayName: 'Agent CleanUp'
      inputs:
        targetType: 'inline'
        script: 'Get-ChildItem -Recurse | foreach { Write-Host $_.FullName ; Remove-Item $_.FullName -Force -Recurse }'
        failOnStderr: true
        workingDirectory: '$(Build.SourcesDirectory)'
- stage: 'DR_Dev_Deployment'
  pool:
    name: selfhostedagent-preprod
  dependsOn:
  - PR_Dev_Deployment
  condition: and(succeeded('PR_Dev_Deployment'), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  displayName: 'Deploy Build on AppService in secondary Dev environment'
  jobs:
  - job: ''
    variables:
    - group: 'ServiceConnections-DR-Dev'
    - group: 'Virtual-Network-DR-Dev'
    - group: 'OlosUI-DR-Dev'
    - group: 'PrivateDNSZone-DR-Dev'
    - group: 'OLOSUI-FTP-DR-DEV'
    - group: 'common-appsettings-DR-Dev'
    - name: 'VariableGroupId'
      value: 146
    - name: 'FtpHost'
      value: 'FTP_HOST'
    - name: 'FtpUserName'
      value: 'USERNAME'
    - name: 'FtpPassword'
      value: 'PASSWORD'
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: DevOps
    - task: AzureResourceGroupDeployment@2
      displayName: 'Provision appService'
      inputs:
        azureSubscription: '$(subscription)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroupName)'
        location: '$(location)'
        templateLocation: 'Linked artifact'
        csmFile: 'multipleSiteAppServices/template.json'
        overrideParameters: '-appServicePlanName $(appServicePlanName) -webAppName $(webAppName) -tags $(tags) -privatelinkName $(privatelinkName) -pvlinkVnetResourceGroup $(vnetResourcegroup) -pvlinkVnetName $(vnetName) -pvlinksnetName $(privateEndpointSubnet) -pVnetSnetName $(uiAppIntSubnet) -dnsLocation $(dnsLocation) -dnsSubscriptionId $(dnsSubscriptionId) -dnsResourceGroup $(dnsResourceGroup) -location $(location)'
        deploymentMode: 'Incremental'
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: '$(subscription)'
        ScriptType: 'FilePath'
        ScriptPath: 'multipleSiteAppServices/update_app_service_ftp_credentials.ps1'
        ScriptArguments: '-PatToken $(PatToken) -VariableGroupId $(VariableGroupId) -FtpHost $(FtpHost) -FtpUserName $(FtpUserName) -FtpPassword $(FtpPassword) -AppServiceName $(webAppName) -ResourceGroupName $(resourceGroupName)'
        azurePowerShellVersion: 'LatestVersion'
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy Build on AppService'
      inputs:
        azureSubscription: '$(subscription)'
        WebAppName: '$(webAppName)'
        packageForLinux: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL) -NEW_RELIC_APP_NAME $(NEW_RELIC_APP_NAME) -NEW_RELIC_LICENSE_KEY $(NEW_RELIC_LICENSE_KEY)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/Certificates'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot/Certificates'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-DR-Dev'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: '$(FTP_HOST)'
        username: '$(USERNAME)'
        password: '$(PASSWORD)'
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-DR-Dev'
        filePatterns: |
          saml.config
          OlosSamlConfig.xml
        remoteDirectory: '/site/wwwroot/bin'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: AzureRmWebAppDeployment@3
      displayName: 'Deploy Build for nested Olosadmin App'
      inputs:
        azureSubscription: '$(subscription)'
        appType: 'app'
        WebAppName: '$(webAppName)'
        VirtualApplication: '/olosadmin'
        Package: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosAdminXMLTransformation'
        filePatterns: 'Web.config'
        remoteDirectory: '/site/wwwroot/olosadmin/'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: new-relic-record-deployment-task@0
      displayName: 'Set New Relic Deployment Marker'
      inputs:
        NewRelicService: 'New Relic Deployment Marker'
        application: '$(NEW_RELIC_APP_NAME)'
        description: '$(Description)'
        user: '$(User)'
    - task: PowerShell@2
      displayName: 'Agent CleanUp'
      inputs:
        targetType: 'inline'
        script: 'Get-ChildItem -Recurse | foreach { Write-Host $_.FullName ; Remove-Item $_.FullName -Force -Recurse }'
        failOnStderr: true
        workingDirectory: '$(Build.SourcesDirectory)'
- stage: 'QA_Deployment'
  pool:
    name: selfhostedagent-preprod
  dependsOn:
  - PR_Dev_Deployment
  condition: and(succeeded('PR_Dev_Deployment'),succeeded('QA_Build'), eq(variables['Build.SourceBranch'], 'refs/heads/dev'))
  displayName: 'Deploy Build on AppService in QA environment'
  jobs:
  - deployment: 'Deploy'
    environment:
      name: 'QA'
  - job: ''
    variables:
    - group: 'OLOSUI-PR-QA'
    - group: 'ServiceConnections-PR-QA'
    - group: 'Virtual-Network-PR-Preprod-Shared'
    - group: 'Subnets-PR-QA'
    - group: 'PrivateDNSZone-Preprod-Shared'
    - group: 'OLOSUI-FTP-PR-QA'
    - group: 'common-appsettings-PR-QA'
    - name: 'VariableGroupId'
      value: 214
    - name: 'FtpHost'
      value: 'FTP_HOST'
    - name: 'FtpUserName'
      value: 'USERNAME'
    - name: 'FtpPassword'
      value: 'PASSWORD'
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: DevOps
    - task: AzureResourceGroupDeployment@2
      displayName: 'Provision appService'
      inputs:
        azureSubscription: '$(subscription)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroupName)'
        location: '$(location)'
        templateLocation: 'Linked artifact'
        csmFile: 'multipleSiteAppServices/template.json'
        overrideParameters: '-appServicePlanName $(appServicePlanName) -webAppName $(webAppName) -tags $(tags) -privatelinkName $(privatelinkName) -pvlinkVnetResourceGroup $(vnetResourcegroup) -pvlinkVnetName $(vnetName) -pvlinksnetName $(privateEndpointSubnet) -pVnetSnetName $(uiAppIntSubnet) -dnsLocation $(dnsLocation) -dnsSubscriptionId $(dnsSubscriptionId) -dnsResourceGroup $(dnsResourceGroup) -location $(location)'
        deploymentMode: 'Incremental'
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: '$(subscription)'
        ScriptType: 'FilePath'
        ScriptPath: 'multipleSiteAppServices/update_app_service_ftp_credentials.ps1'
        ScriptArguments: '-PatToken $(PatToken) -VariableGroupId $(VariableGroupId) -FtpHost $(FtpHost) -FtpUserName $(FtpUserName) -FtpPassword $(FtpPassword) -AppServiceName $(webAppName) -ResourceGroupName $(resourceGroupName)'
        azurePowerShellVersion: 'LatestVersion'
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy Build on AppService'
      inputs:
        azureSubscription: '$(subscription)'
        WebAppName: '$(webAppName)'
        packageForLinux: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL) -NEW_RELIC_APP_NAME $(NEW_RELIC_APP_NAME) -NEW_RELIC_LICENSE_KEY $(NEW_RELIC_LICENSE_KEY)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/Certificates'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot/Certificates'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-QA'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: '$(FTP_HOST)'
        username: '$(USERNAME)'
        password: '$(PASSWORD)'
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-QA'
        filePatterns: |
          saml.config
          OlosSamlConfig.xml
        remoteDirectory: '/site/wwwroot/bin'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: AzureRmWebAppDeployment@3
      displayName: 'Deploy Build for nested Olosadmin App'
      inputs:
        azureSubscription: '$(subscription)'
        appType: 'app'
        WebAppName: '$(webAppName)'
        VirtualApplication: '/olosadmin'
        Package: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosAdminXMLTransformation'
        filePatterns: 'Web.config'
        remoteDirectory: '/site/wwwroot/olosadmin/'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: new-relic-record-deployment-task@0
      displayName: 'Set New Relic Deployment Marker'
      inputs:
        NewRelicService: 'New Relic Deployment Marker'
        application: '$(NEW_RELIC_APP_NAME)'
        description: '$(Description)'
        user: '$(User)'
    - task: PowerShell@2
      displayName: 'Agent CleanUp'
      inputs:
        targetType: 'inline'
        script: 'Get-ChildItem -Recurse | foreach { Write-Host $_.FullName ; Remove-Item $_.FullName -Force -Recurse }'
        failOnStderr: true
        workingDirectory: '$(Build.SourcesDirectory)'
- stage: 'UAT_Deployment'
  pool:
    name: selfhostedagent-preprod
  dependsOn:
  - Template_Validation
  condition: and(succeeded('Template_Validation'),succeeded('UAT_Build'), contains(variables['Build.SourceBranch'], 'refs/heads/release/'))
  displayName: 'Deploy Build on AppService in UAT environment'
  jobs:
  - deployment: 'Deploy'
    environment:
      name: 'UAT'
  - job: ''
    variables:
    - group: 'OLOSUI-PR-UAT'
    - group: 'ServiceConnections-PR-UAT'
    - group: 'Virtual-Network-PR-Preprod-Shared'
    - group: 'Subnets-PR-UAT'
    - group: 'PrivateDNSZone-Preprod-Shared'
    - group: 'OLOSUI-FTP-PR-UAT'
    - group: 'common-appsettings-PR-UAT'
    - name: 'VariableGroupId'
      value: 308
    - name: 'FtpHost'
      value: 'FTP_HOST'
    - name: 'FtpUserName'
      value: 'USERNAME'
    - name: 'FtpPassword'
      value: 'PASSWORD'
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: DevOps
    - task: AzureResourceGroupDeployment@2
      displayName: 'Provision appService'
      inputs:
        azureSubscription: '$(subscription)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroupName)'
        location: '$(location)'
        templateLocation: 'Linked artifact'
        csmFile: 'multipleSiteAppServices/template.json'
        overrideParameters: '-appServicePlanName $(appServicePlanName) -webAppName $(webAppName) -tags $(tags) -privatelinkName $(privatelinkName) -pvlinkVnetResourceGroup $(vnetResourcegroup) -pvlinkVnetName $(vnetName) -pvlinksnetName $(privateEndpointSubnet) -pVnetSnetName $(uiAppIntSubnet) -dnsLocation $(dnsLocation) -dnsSubscriptionId $(dnsSubscriptionId) -dnsResourceGroup $(dnsResourceGroup) -location $(location)'
        deploymentMode: 'Incremental'
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: '$(subscription)'
        ScriptType: 'FilePath'
        ScriptPath: 'multipleSiteAppServices/update_app_service_ftp_credentials.ps1'
        ScriptArguments: '-PatToken $(PatToken) -VariableGroupId $(VariableGroupId) -FtpHost $(FtpHost) -FtpUserName $(FtpUserName) -FtpPassword $(FtpPassword) -AppServiceName $(webAppName) -ResourceGroupName $(resourceGroupName)'
        azurePowerShellVersion: 'LatestVersion'
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy Build on AppService'
      inputs:
        azureSubscription: '$(subscription)'
        WebAppName: '$(webAppName)'
        packageForLinux: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL) -NEW_RELIC_APP_NAME $(NEW_RELIC_APP_NAME) -NEW_RELIC_LICENSE_KEY $(NEW_RELIC_LICENSE_KEY)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/Certificates'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot/Certificates'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-UAT'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: '$(FTP_HOST)'
        username: '$(USERNAME)'
        password: '$(PASSWORD)'
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-UAT'
        filePatterns: |
          saml.config
          OlosSamlConfig.xml
        remoteDirectory: '/site/wwwroot/bin'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: AzureRmWebAppDeployment@3
      displayName: 'Deploy Build for nested Olosadmin App'
      inputs:
        azureSubscription: '$(subscription)'
        appType: 'app'
        WebAppName: '$(webAppName)'
        VirtualApplication: '/olosadmin'
        Package: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosAdminXMLTransformation'
        filePatterns: 'Web.config'
        remoteDirectory: '/site/wwwroot/olosadmin/'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: new-relic-record-deployment-task@0
      displayName: 'Set New Relic Deployment Marker'
      inputs:
        NewRelicService: 'New Relic Deployment Marker'
        application: 'app-olosui-tmp-cus-uat'
        description: '$(Description)'
        user: '$(User)'
    - task: PowerShell@2
      displayName: 'Agent CleanUp'
      inputs:
        targetType: 'inline'
        script: 'Get-ChildItem -Recurse | foreach { Write-Host $_.FullName ; Remove-Item $_.FullName -Force -Recurse }'
        failOnStderr: true
        workingDirectory: '$(Build.SourcesDirectory)'
- stage: 'UAT_Post_Approval'
  pool:
    name: selfhostedagent-preprod
  dependsOn:
  - UAT_Deployment
  condition: and(succeeded('UAT_Deployment'), contains(variables['Build.SourceBranch'], 'refs/heads/release/'))
  displayName: 'Post UAT Approval'
  jobs:
  - deployment: 'Deploy'
    environment:
      name: 'UAT'
- stage: 'PR_Stage_Deployment'
  pool:
    name: selfhostedagent-preprod
  dependsOn:
  - Template_Validation
  - UAT_Post_Approval
  condition: or(succeeded('UAT_Post_Approval'), and(succeeded('Template_Validation'), succeeded('Staging_Build'), contains(variables['Build.SourceBranch'], 'refs/heads/hotfix/')))
  displayName: 'Deploy Build on AppService in Staging environment'
  jobs:
  - deployment: 'Deploy'
    environment:
      name: 'Staging'
  - job: ''
    variables:
    - group: 'OLOSUI-PR-Stage'
    - group: 'ServiceConnections-PR-Stage'
    - group: 'Virtual-Network-PR-Preprod-Shared'
    - group: 'Subnets-PR-Stage'
    - group: 'PrivateDNSZone-Preprod-Shared'
    - group: 'OLOSUI-FTP-PR-Stage'
    - group: 'common-appsettings-PR-Stage'
    - name: 'VariableGroupId'
      value: 468
    - name: 'FtpHost'
      value: 'FTP_HOST'
    - name: 'FtpUserName'
      value: 'USERNAME'
    - name: 'FtpPassword'
      value: 'PASSWORD'
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: DevOps
    - task: AzureResourceGroupDeployment@2
      displayName: 'Provision appService'
      inputs:
        azureSubscription: '$(subscription)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroupName)'
        location: '$(location)'
        templateLocation: 'Linked artifact'
        csmFile: 'multipleSiteAppServices/template.json'
        overrideParameters: '-appServicePlanName $(appServicePlanName) -webAppName $(webAppName) -tags $(tags) -privatelinkName $(privatelinkName) -pvlinkVnetResourceGroup $(vnetResourcegroup) -pvlinkVnetName $(vnetName) -pvlinksnetName $(privateEndpointSubnet) -pVnetSnetName $(uiAppIntSubnet) -dnsLocation $(dnsLocation) -dnsSubscriptionId $(dnsSubscriptionId) -dnsResourceGroup $(dnsResourceGroup) -location $(location)'
        deploymentMode: 'Incremental'
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: '$(subscription)'
        ScriptType: 'FilePath'
        ScriptPath: 'multipleSiteAppServices/update_app_service_ftp_credentials.ps1'
        ScriptArguments: '-PatToken $(PatToken) -VariableGroupId $(VariableGroupId) -FtpHost $(FtpHost) -FtpUserName $(FtpUserName) -FtpPassword $(FtpPassword) -AppServiceName $(webAppName) -ResourceGroupName $(resourceGroupName)'
        azurePowerShellVersion: 'LatestVersion'
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy Build on AppService'
      inputs:
        azureSubscription: '$(subscription)'
        WebAppName: '$(webAppName)'
        packageForLinux: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/Certificates'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot/Certificates'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-Stage'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: '$(FTP_HOST)'
        username: '$(USERNAME)'
        password: '$(PASSWORD)'
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-Stage'
        filePatterns: |
          saml.config
          OlosSamlConfig.xml
        remoteDirectory: '/site/wwwroot/bin'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: AzureRmWebAppDeployment@3
      displayName: 'Deploy Build for nested Olosadmin App'
      inputs:
        azureSubscription: '$(subscription)'
        appType: 'app'
        WebAppName: '$(webAppName)'
        VirtualApplication: '/olosadmin'
        Package: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosAdminXMLTransformation'
        filePatterns: 'Web.config'
        remoteDirectory: '/site/wwwroot/olosadmin/'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: PowerShell@2
      displayName: 'Agent CleanUp'
      inputs:
        targetType: 'inline'
        script: 'Get-ChildItem -Recurse | foreach { Write-Host $_.FullName ; Remove-Item $_.FullName -Force -Recurse }'
        failOnStderr: true
        workingDirectory: '$(Build.SourcesDirectory)'
- stage: 'Staging_Post_Approval'
  pool:
    name: selfhostedagent-preprod
  dependsOn:
  - PR_Stage_Deployment
  condition: and(succeeded('PR_Stage_Deployment'), or(contains(variables['Build.SourceBranch'], 'refs/heads/release/'),contains(variables['Build.SourceBranch'], 'refs/heads/hotfix/')))
  displayName: 'Post Staging Approval'
  jobs:
  - deployment: 'Deploy'
    environment:
      name: 'Staging'
- stage: 'PR_Prod_Deployment'
  pool:
    name: selfhostedagent-prod
  dependsOn:
  - Staging_Post_Approval
  condition: and(succeeded('Staging_Post_Approval'), or(contains(variables['Build.SourceBranch'], 'refs/heads/release/'),contains(variables['Build.SourceBranch'], 'refs/heads/hotfix/')))
  displayName: 'Deploy Build on AppService in primary Prod environment'
  jobs:
  - deployment: 'Deploy'
    environment:
      name: 'Prod'
  - job: ''
    variables:
    - group: 'OLOSUI-PR-Prod'
    - group: 'ServiceConnections-PR-Prod'
    - group: 'Virtual-Network-PR-Prod'
    - group: 'Subnets-PR-Prod'
    - group: 'PrivateDNSZone-PR-Prod'
    - group: 'OLOSUI-FTP-PR-Prod'
    - group: 'common-appsettings-PR-Prod'
    - name: 'VariableGroupId'
      value: 467
    - name: 'FtpHost'
      value: 'FTP_HOST'
    - name: 'FtpUserName'
      value: 'USERNAME'
    - name: 'FtpPassword'
      value: 'PASSWORD'
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: DevOpsProd
    - task: AzureResourceGroupDeployment@2
      displayName: 'Provision appService'
      inputs:
        azureSubscription: '$(subscriptionProd)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroupName)'
        location: '$(location)'
        templateLocation: 'Linked artifact'
        csmFile: 'multipleSiteAppServices/template.json'
        overrideParameters: '-appServicePlanName $(appServicePlanName) -webAppName $(webAppName) -tags $(tags) -privatelinkName $(privatelinkName) -pvlinkVnetResourceGroup $(vnetResourcegroup) -pvlinkVnetName $(vnetName) -pvlinksnetName $(privateEndpointSubnet) -pVnetSnetName $(uiAppIntSubnet) -dnsLocation $(dnsLocation) -dnsSubscriptionId $(dnsSubscriptionId) -dnsResourceGroup $(dnsResourceGroup) -location $(location)'
        deploymentMode: 'Incremental'
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: '$(subscriptionProd)'
        ScriptType: 'FilePath'
        ScriptPath: 'multipleSiteAppServices/update_app_service_ftp_credentials.ps1'
        ScriptArguments: '-PatToken $(PatToken) -VariableGroupId $(VariableGroupId) -FtpHost $(FtpHost) -FtpUserName $(FtpUserName) -FtpPassword $(FtpPassword) -AppServiceName $(webAppName) -ResourceGroupName $(resourceGroupName)'
        azurePowerShellVersion: 'LatestVersion'
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy Build on AppService'
      inputs:
        azureSubscription: '$(subscriptionProd)'
        WebAppName: '$(webAppName)'
        packageForLinux: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL) -NEW_RELIC_APP_NAME $(NEW_RELIC_APP_NAME) -NEW_RELIC_LICENSE_KEY $(NEW_RELIC_LICENSE_KEY)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: '$(FTP_HOST)'
        username: '$(USERNAME)'
        password: '$(PASSWORD)'
        rootDirectory: 'OLOS/Certificates'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot/Certificates'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-PR-Prod'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: '$(FTP_HOST)'
        username: '$(USERNAME)'
        password: '$(PASSWORD)'
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-PR-Prod'
        filePatterns: |
          saml.config
          OlosSamlConfig.xml
        remoteDirectory: '/site/wwwroot/bin'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: AzureRmWebAppDeployment@3
      displayName: 'Deploy Build for nested Olosadmin App'
      inputs:
        azureSubscription: '$(subscriptionProd)'
        appType: 'app'
        WebAppName: '$(webAppName)'
        VirtualApplication: '/olosadmin'
        Package: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosAdminXMLTransformation'
        filePatterns: 'Web.config'
        remoteDirectory: '/site/wwwroot/olosadmin/'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: DeleteFiles@1
      inputs:
        SourceFolder: '$(Agent.BuildDirectory)/s/'
        Contents: '**/*'
    - task: new-relic-record-deployment-task@0
      displayName: 'Set New Relic Deployment Marker'
      inputs:
        NewRelicService: 'New Relic Deployment Marker'
        application: 'app-olosui-tmp-cus-prod'
        changelog: '$(Changelog)'
        description: '$(Description)'
        user: '$(User)'
    - task: PowerShell@2
      displayName: 'Agent CleanUp'
      inputs:
        targetType: 'inline'
        script: 'Get-ChildItem -Recurse | foreach { Write-Host $_.FullName ; Remove-Item $_.FullName -Force -Recurse }'
        failOnStderr: true
        workingDirectory: '$(Build.SourcesDirectory)'
- stage: 'DR_Prod_Deployment'
  pool:
    name: selfhostedagent-prod
  dependsOn:
  - PR_Prod_Deployment
  condition: and(succeeded('PR_Prod_Deployment'), or(contains(variables['Build.SourceBranch'], 'refs/heads/release/'),contains(variables['Build.SourceBranch'], 'refs/heads/hotfix/')))
  displayName: 'Deploy Build on AppService in secondary Prod environment'
  jobs:
  - deployment: 'Deploy'
    environment:
      name: 'Prod'
  - job: ''
    variables:
    - group: 'OLOSUI-DR-Prod'
    - group: 'ServiceConnections-DR-Prod'
    - group: 'Virtual-Network-DR-Prod'
    - group: 'Subnets-DR-Prod'
    - group: 'PrivateDNSZone-DR-Prod'
    - group: 'OLOSUI-FTP-DR-Prod'
    - group: 'common-appsettings-DR-Prod'
    - name: 'VariableGroupId'
      value: 607
    - name: 'FtpHost'
      value: 'FTP_HOST'
    - name: 'FtpUserName'
      value: 'USERNAME'
    - name: 'FtpPassword'
      value: 'PASSWORD'
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: DevOpsProd
    - task: AzureResourceGroupDeployment@2
      displayName: 'Provision appService'
      inputs:
        azureSubscription: '$(subscriptionProd)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroupName)'
        location: '$(location)'
        templateLocation: 'Linked artifact'
        csmFile: 'multipleSiteAppServices/template.json'
        overrideParameters: '-appServicePlanName $(appServicePlanName) -webAppName $(webAppName) -tags $(tags) -privatelinkName $(privatelinkName) -pvlinkVnetResourceGroup $(vnetResourcegroup) -pvlinkVnetName $(vnetName) -pvlinksnetName $(privateEndpointSubnet) -pVnetSnetName $(uiAppIntSubnet) -dnsLocation $(dnsLocation) -dnsSubscriptionId $(dnsSubscriptionId) -dnsResourceGroup $(dnsResourceGroup) -location $(location)'
        deploymentMode: 'Incremental'
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: '$(subscriptionProd)'
        ScriptType: 'FilePath'
        ScriptPath: 'multipleSiteAppServices/update_app_service_ftp_credentials.ps1'
        ScriptArguments: '-PatToken $(PatToken) -VariableGroupId $(VariableGroupId) -FtpHost $(FtpHost) -FtpUserName $(FtpUserName) -FtpPassword $(FtpPassword) -AppServiceName $(webAppName) -ResourceGroupName $(resourceGroupName)'
        azurePowerShellVersion: 'LatestVersion'
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy Build on AppService'
      inputs:
        azureSubscription: '$(subscriptionProd)'
        WebAppName: '$(webAppName)'
        packageForLinux: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL) -NEW_RELIC_APP_NAME $(NEW_RELIC_APP_NAME) -NEW_RELIC_LICENSE_KEY $(NEW_RELIC_LICENSE_KEY)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: '$(FTP_HOST)'
        username: '$(USERNAME)'
        password: '$(PASSWORD)'
        rootDirectory: 'OLOS/Certificates'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot/Certificates'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-DR-Prod'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: '$(FTP_HOST)'
        username: '$(USERNAME)'
        password: '$(PASSWORD)'
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-DR-Prod'
        filePatterns: |
          saml.config
          OlosSamlConfig.xml
        remoteDirectory: '/site/wwwroot/bin'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: AzureRmWebAppDeployment@3
      displayName: 'Deploy Build for nested Olosadmin App'
      inputs:
        azureSubscription: '$(subscriptionProd)'
        appType: 'app'
        WebAppName: '$(webAppName)'
        VirtualApplication: '/olosadmin'
        Package: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosAdminXMLTransformation'
        filePatterns: 'Web.config'
        remoteDirectory: '/site/wwwroot/olosadmin/'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: DeleteFiles@1
      inputs:
        SourceFolder: '$(Agent.BuildDirectory)/s/'
        Contents: '**/*'
    - task: new-relic-record-deployment-task@0
      displayName: 'Set New Relic Deployment Marker'
      inputs:
        NewRelicService: 'New Relic Deployment Marker'
        application: 'app-olosui-tmp-eus2-prod'
        changelog: '$(Changelog)'
        description: '$(Description)'
        user: '$(User)'
    - task: PowerShell@2
      displayName: 'Agent CleanUp'
      inputs:
        targetType: 'inline'
        script: 'Get-ChildItem -Recurse | foreach { Write-Host $_.FullName ; Remove-Item $_.FullName -Force -Recurse }'
        failOnStderr: true
        workingDirectory: '$(Build.SourcesDirectory)'
- stage: 'Prod_Post_Approval'
  pool:
    name: selfhostedagent-prod
  dependsOn:
  - DR_Prod_Deployment
  condition: and(succeeded('DR_Prod_Deployment'), or(contains(variables['Build.SourceBranch'], 'refs/heads/release/'),contains(variables['Build.SourceBranch'], 'refs/heads/hotfix/')))
  displayName: 'Post Prod Approval'
  jobs:
  - deployment: 'Deploy'
    environment:
      name: 'Prod'
- stage: 'EHRTEST_Deployment'
  pool:
    name: selfhostedagent-preprod
  dependsOn:
  - Prod_Post_Approval
  condition: and(succeeded('Prod_Post_Approval'), succeeded('EHRTEST_Build'), or(contains(variables['Build.SourceBranch'], 'refs/heads/release/'),contains(variables['Build.SourceBranch'], 'refs/heads/hotfix/')))
  displayName: 'Deploy Build on AppService in EHRTEST environment'
  jobs:
  - deployment: 'Deploy'
    environment:
      name: 'EHRTEST'
  - job: ''
    variables:
    - group: 'OLOSUI-PR-EHRTEST'
    - group: 'ServiceConnections-PR-EHRTEST'
    - group: 'Virtual-Network-PR-Preprod-Shared'
    - group: 'Subnets-PR-EHRTEST'
    - group: 'PrivateDNSZone-Preprod-Shared'
    - group: 'OLOSUI-FTP-PR-EHRTEST'
    - group: 'common-appsettings-PR-EHRTEST'
    - name: 'VariableGroupId'
      value: 313
    - name: 'FtpHost'
      value: 'FTP_HOST'
    - name: 'FtpUserName'
      value: 'USERNAME'
    - name: 'FtpPassword'
      value: 'PASSWORD'
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: DevOps
    - task: AzureResourceGroupDeployment@2
      displayName: 'Provision appService'
      inputs:
        azureSubscription: '$(subscription)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroupName)'
        location: '$(location)'
        templateLocation: 'Linked artifact'
        csmFile: 'multipleSiteAppServices/template.json'
        overrideParameters: '-appServicePlanName $(appServicePlanName) -webAppName $(webAppName) -tags $(tags) -privatelinkName $(privatelinkName) -pvlinkVnetResourceGroup $(vnetResourcegroup) -pvlinkVnetName $(vnetName) -pvlinksnetName $(privateEndpointSubnet) -pVnetSnetName $(uiAppIntSubnet) -dnsLocation $(dnsLocation) -dnsSubscriptionId $(dnsSubscriptionId) -dnsResourceGroup $(dnsResourceGroup) -location $(location)'
        deploymentMode: 'Incremental'
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: '$(subscription)'
        ScriptType: 'FilePath'
        ScriptPath: 'multipleSiteAppServices/update_app_service_ftp_credentials.ps1'
        ScriptArguments: '-PatToken $(PatToken) -VariableGroupId $(VariableGroupId) -FtpHost $(FtpHost) -FtpUserName $(FtpUserName) -FtpPassword $(FtpPassword) -AppServiceName $(webAppName) -ResourceGroupName $(resourceGroupName)'
        azurePowerShellVersion: 'LatestVersion'
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy Build on AppService'
      inputs:
        azureSubscription: '$(subscription)'
        WebAppName: '$(webAppName)'
        packageForLinux: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/Certificates'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot/Certificates'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-EHRTEST'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: '$(FTP_HOST)'
        username: '$(USERNAME)'
        password: '$(PASSWORD)'
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-EHRTEST'
        filePatterns: |
          saml.config
          OlosSamlConfig.xml
        remoteDirectory: '/site/wwwroot/bin'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: AzureRmWebAppDeployment@3
      displayName: 'Deploy Build for nested Olosadmin App'
      inputs:
        azureSubscription: '$(subscription)'
        appType: 'app'
        WebAppName: '$(webAppName)'
        VirtualApplication: '/olosadmin'
        Package: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosAdminXMLTransformation'
        filePatterns: 'Web.config'
        remoteDirectory: '/site/wwwroot/olosadmin/'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: PowerShell@2
      displayName: 'Agent CleanUp'
      inputs:
        targetType: 'inline'
        script: 'Get-ChildItem -Recurse | foreach { Write-Host $_.FullName ; Remove-Item $_.FullName -Force -Recurse }'
        failOnStderr: true
        workingDirectory: '$(Build.SourcesDirectory)'
- stage: 'EHRTEST_Post_Approval'
  pool:
    name: selfhostedagent-preprod
  dependsOn:
  - EHRTEST_Deployment
  condition: and(succeeded('EHRTEST_Deployment'), or(contains(variables['Build.SourceBranch'], 'refs/heads/release/'),contains(variables['Build.SourceBranch'], 'refs/heads/hotfix/')))
  displayName: 'Post EHRTEST Approval'
  jobs:
  - deployment: 'Deploy'
    environment:
      name: 'EHRTEST'
- stage: 'EHR_Deployment'
  pool:
    name: selfhostedagent-preprod
  dependsOn:
  - Template_Validation
  condition: and(succeeded('Template_Validation'), succeeded('EHRTEST_Build'), contains(variables['Build.SourceBranch'], 'refs/heads/ehr/'))
  displayName: 'Deploy Build on AppService in EHR environment'
  jobs:
  - deployment: 'Deploy'
    environment:
      name: 'EHRTEST'
  - job: ''
    variables:
    - group: 'OLOSUI-PR-EHRTEST'
    - group: 'ServiceConnections-PR-EHRTEST'
    - group: 'Virtual-Network-PR-Preprod-Shared'
    - group: 'Subnets-PR-EHRTEST'
    - group: 'PrivateDNSZone-Preprod-Shared'
    - group: 'OLOSUI-FTP-PR-EHRTEST'
    - group: 'common-appsettings-PR-EHRTEST'
    - name: 'VariableGroupId'
      value: 313
    - name: 'FtpHost'
      value: 'FTP_HOST'
    - name: 'FtpUserName'
      value: 'USERNAME'
    - name: 'FtpPassword'
      value: 'PASSWORD'
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: DevOps
    - task: AzureResourceGroupDeployment@2
      displayName: 'Provision appService'
      inputs:
        azureSubscription: '$(subscription)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroupName)'
        location: '$(location)'
        templateLocation: 'Linked artifact'
        csmFile: 'multipleSiteAppServices/template.json'
        overrideParameters: '-appServicePlanName $(appServicePlanName) -webAppName $(webAppName) -tags $(tags) -privatelinkName $(privatelinkName) -pvlinkVnetResourceGroup $(vnetResourcegroup) -pvlinkVnetName $(vnetName) -pvlinksnetName $(privateEndpointSubnet) -pVnetSnetName $(uiAppIntSubnet) -dnsLocation $(dnsLocation) -dnsSubscriptionId $(dnsSubscriptionId) -dnsResourceGroup $(dnsResourceGroup) -location $(location)'
        deploymentMode: 'Incremental'
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: '$(subscription)'
        ScriptType: 'FilePath'
        ScriptPath: 'multipleSiteAppServices/update_app_service_ftp_credentials.ps1'
        ScriptArguments: '-PatToken $(PatToken) -VariableGroupId $(VariableGroupId) -FtpHost $(FtpHost) -FtpUserName $(FtpUserName) -FtpPassword $(FtpPassword) -AppServiceName $(webAppName) -ResourceGroupName $(resourceGroupName)'
        azurePowerShellVersion: 'LatestVersion'
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy Build on AppService'
      inputs:
        azureSubscription: '$(subscription)'
        WebAppName: '$(webAppName)'
        packageForLinux: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/Certificates'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot/Certificates'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-EHRTEST'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: '$(FTP_HOST)'
        username: '$(USERNAME)'
        password: '$(PASSWORD)'
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-EHRTEST'
        filePatterns: |
          saml.config
          OlosSamlConfig.xml
        remoteDirectory: '/site/wwwroot/bin'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: AzureRmWebAppDeployment@3
      displayName: 'Deploy Build for nested Olosadmin App'
      inputs:
        azureSubscription: '$(subscription)'
        appType: 'app'
        WebAppName: '$(webAppName)'
        VirtualApplication: '/olosadmin'
        Package: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosAdminXMLTransformation'
        filePatterns: 'Web.config'
        remoteDirectory: '/site/wwwroot/olosadmin/'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: PowerShell@2
      displayName: 'Agent CleanUp'
      inputs:
        targetType: 'inline'
        script: 'Get-ChildItem -Recurse | foreach { Write-Host $_.FullName ; Remove-Item $_.FullName -Force -Recurse }'
        failOnStderr: true
        workingDirectory: '$(Build.SourcesDirectory)'
- stage: 'EHR_Post_Approval'
  pool:
    name: selfhostedagent-preprod
  dependsOn:
  - EHR_Deployment
  condition: and(succeeded('EHR_Deployment'), contains(variables['Build.SourceBranch'], 'refs/heads/ehr/'))
  displayName: 'Post EHR Approval'
  jobs:
  - deployment: 'Deploy'
    environment:
      name: 'EHRTEST'
- stage: 'PR_DevSandbox_Deployment'
  pool:
    name: selfhostedagent-preprod
  dependsOn:
  - Template_Validation
  condition: and(succeeded('Template_Validation'),succeeded('DevSandbox_Build'), contains(variables['Build.SourceBranch'], 'refs/heads/devsandbox'))
  displayName: 'Deploy Build on AppService in primary DevSandbox environment'
  jobs:
  - job: ''
    variables:
    - group: 'OlosUI-PR-Dev-Sandbox'
    - group: 'ServiceConnections-PR-Dev-Sandbox'
    - group: 'Virtual-Network-PR-Dev-Sandbox'
    - group: 'Subnets-PR-Dev-SandBox'
    - group: 'PrivateDNSZone-PR-Dev-Sandbox'
    - group: 'OLOSUI-FTP-PR-DEV-Sandbox'
    - group: 'common-appsettings-PR-Dev-Sandbox'
    - name: 'VariableGroupId'
      value: 802
    - name: 'FtpHost'
      value: 'FTP_HOST'
    - name: 'FtpUserName'
      value: 'USERNAME'
    - name: 'FtpPassword'
      value: 'PASSWORD'
    steps:
    - task: 6d15af64-176c-496d-b583-fd2ae21d4df4@1
      inputs:
        repository: DevOps
    - task: AzureResourceGroupDeployment@2
      displayName: 'Provision appService'
      inputs:
        azureSubscription: '$(subscription)'
        action: 'Create Or Update Resource Group'
        resourceGroupName: '$(resourceGroupName)'
        location: '$(location)'
        templateLocation: 'Linked artifact'
        csmFile: 'multipleSiteAppServices/template.json'
        overrideParameters: '-appServicePlanName $(appServicePlanName) -webAppName $(webAppName) -tags $(tags) -privatelinkName $(privatelinkName) -pvlinkVnetResourceGroup $(vnetResourcegroup) -pvlinkVnetName $(vnetName) -pvlinksnetName $(privateEndpointSubnet) -pVnetSnetName $(uiAppIntSubnet) -dnsLocation $(dnsLocation) -dnsSubscriptionId $(dnsSubscriptionId) -dnsResourceGroup $(dnsResourceGroup) -location $(location)'
        deploymentMode: 'Incremental'
    - task: AzurePowerShell@5
      inputs:
        azureSubscription: '$(subscription)'
        ScriptType: 'FilePath'
        ScriptPath: 'multipleSiteAppServices/update_app_service_ftp_credentials.ps1'
        ScriptArguments: '-PatToken $(PatToken) -VariableGroupId $(VariableGroupId) -FtpHost $(FtpHost) -FtpUserName $(FtpUserName) -FtpPassword $(FtpPassword) -AppServiceName $(webAppName) -ResourceGroupName $(resourceGroupName)'
        azurePowerShellVersion: 'LatestVersion'
    - task: DownloadBuildArtifacts@0
      inputs:
        buildType: 'current'
        downloadType: 'single'
        artifactName: 'Drop'
        downloadPath: '$(System.ArtifactsDirectory)'
    - task: AzureRmWebAppDeployment@4
      displayName: 'Deploy Build on AppService'
      inputs:
        azureSubscription: '$(subscription)'
        WebAppName: '$(webAppName)'
        packageForLinux: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/Certificates'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot/Certificates'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-DevSandbox'
        filePatterns: '**'
        remoteDirectory: '/site/wwwroot'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: '$(FTP_HOST)'
        username: '$(USERNAME)'
        password: '$(PASSWORD)'
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosUI-DevSandbox'
        filePatterns: |
          saml.config
          OlosSamlConfig.xml
        remoteDirectory: '/site/wwwroot/bin'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: AzureRmWebAppDeployment@3
      displayName: 'Deploy Build for nested Olosadmin App'
      inputs:
        azureSubscription: '$(subscription)'
        appType: 'app'
        WebAppName: '$(webAppName)'
        VirtualApplication: '/olosadmin'
        Package: '$(System.ArtifactsDirectory)/Drop/*.zip'
        AppSettings: '-WEBSITE_DNS_SERVER $(WEBSITE_DNS_SERVER) -WEBSITE_VNET_ROUTE_ALL $(WEBSITE_VNET_ROUTE_ALL)'
        ConfigurationSettings: '-webSocketsEnabled $(webSocketsEnabled)'
    - task: FtpUpload@2
      inputs:
        credentialsOption: 'inputs'
        serverUrl: "$(FTP_HOST)"
        username: "$(USERNAME)"
        password: "$(PASSWORD)"
        rootDirectory: '$(System.ArtifactsDirectory)/Drop/OlosAdminXMLTransformation'
        filePatterns: 'Web.config'
        remoteDirectory: '/site/wwwroot/olosadmin/'
        clean: false
        cleanContents: false
        preservePaths: true
        trustSSL: false
    - task: PowerShell@2
      displayName: 'Agent CleanUp'
      inputs:
        targetType: 'inline'
        script: 'Get-ChildItem -Recurse | foreach { Write-Host $_.FullName ; Remove-Item $_.FullName -Force -Recurse }'
        failOnStderr: true
        workingDirectory: '$(Build.SourcesDirectory)'

